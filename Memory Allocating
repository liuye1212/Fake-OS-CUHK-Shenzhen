/*
 * This is memory allocation part done by Dorohty.
 * In this part, I use the first-fit algorithm to allocate memory.
 */
#include <iostream>
#include <stdlib.h>
using namespace std;

#define Busy 1;
#define Free 0;
#define OK 1;
#define ERROR 0;
#define MAX_SIZE 640;

typedef int Status;
int flag;


/*
 * FreeArea, which includes information we need to describe partail region of the whole
 * memory space, for example, the size of the memory this block has, the start address
 * and the state of this memory region (allocated or free).
 */
typedef struct FreeArea{
    long size;
    long address;
    int state;
    int FunctionID;  //I add a new thing here, to make sure that allocation corresponds to specific function.
}ElemType;


/* construct a structure called DulNode, with 3 parts:
 * data, and 2 pointers, one pointing to the prior block, the other pointing to the next one.
 * the type of data is what we constructed before --
 */
typedef struct DulNode{
    ElemType data;
    struct DulNode *prior;
    struct DulNode *next;
}DulNode, *DulLinkList;  // DulLinkList is a pointer pointing to a DulNode

DulLinkList first_block;
DulLinkList last_block;

//here are 5 main functions in this file

Status Alloc(int, int);  //allocate memory
Status free(int);  //make some region available again
Status FirstFit(int, int);  //the basic algorithm we used in this fake OS
void show();  // show the result;
Status initblock();  // initialize a block link.

Status initblock(){
    first_block = (DulLinkList)malloc(sizeof(DulNode));
    last_block = (DulLinkList)malloc(sizeof(DulNode));
    first_block->prior = NULL;
    first_block->next = last_block;
    last_block->prior = first_block;
    last_block->next = NULL;
    last_block->data.size = MAX_SIZE;
    last_block->data.address = 0;
    last_block->data.FunctionID = 0;
    last_block->data.state = Free;
    return OK;
}

void show(){
    int flag = 0;
    cout << "Memory Allocation: " << endl;
    cout << "---------------------------------------------------------\n" << endl;
    DulNode *p = first_block->next;
    cout << "Region \t FunctionID \t StartAddress \t MemorySize \t State \n" << endl;
    while (p) {
        cout << "  " << flag++ << "\t";
        cout << "  " << p->data.FunctionID << "\t\t";
        cout << "  " << p->data.address << "\t\t";
        cout << "  " << p->data.size << "KB\t\t";
        int freeState = Free;
        if (p->data.state == freeState) {
            cout << "free" << endl;
        } else {
            cout << "allocated"<< endl;
        }
        p = p->next;
    }
    cout << "---------------------------------------------------------\n" << endl;
}


Status FirstFit(int request, int functionID){
    DulLinkList temp = (DulLinkList)malloc(sizeof(DulNode));
    temp->data.size = request;
    temp->data.state = Busy;
    temp->data.FunctionID = functionID;
    DulNode *p = first_block->next;
    while(p){
        int freeState = Free;
        if (p->data.size == request && p->data.state == freeState){
            p->data.state = Busy;
            p->data.FunctionID = functionID;
            return OK;
            break;
        }
        if (p->data.size > request && p->data.state == freeState){
            temp->prior = p->prior;
            temp->next = p;
            temp->data.address = p->data.address;
            p->prior->next = temp;
            p->prior = temp;
            p->data.address = temp->data.address + temp->data.size;
            p->data.size -= request;
            return OK;
            break;
        }
        p = p->next;
    }
    return ERROR;
}


Status free(int functionID){
    int flag = 0;
    DulNode *p = first_block;
    DulNode *q = first_block->next;
    while (q) {
        if (q->data.FunctionID == functionID) {break;}
        flag++;
        q = q->next;
    }
    for (int i = 0; i <= flag; i++){
        if (p != NULL) {
            p=p->next;
        } else {
            return ERROR;
        }
    }

    p->data.state = Free;
    p->data.FunctionID = 0;
    // 3 situations need to be considered
    // this is the first situation, in which the region before the region you want to free
    // is also available, then we need to connect those two regions
    if(p->prior != first_block && p->prior->data.state == 0){
        p->prior->data.size += p->data.size;
        p->prior->next = p->next;
        p->next->prior = p->prior;
        p = p->prior;
        p->data.FunctionID = 0;
    }

    // this is second situation, in which the region after the region you want to free
    // is also avaiable, then we need to connect those two regions
    if (p->next != last_block && p->next->data.state == 0){
        p->data.FunctionID = 0;
        p->data.size += p->next->data.size;
        p->next->next->prior = p;
        p->next = p->next->next;
    }

    // the last situation is when the region after the region you want to free is
    // the last block, then we need to connect them.
    if (p->next == last_block && p->next->data.state == 0) {
        p->data.FunctionID = 0;
        p->data.size += p->next->data.size;
        p->next = NULL;
    }
    return OK;
}

Status Alloc(int request, int functionID){
    if (request <= 0) {
        cout <<" This is not a valid size of memory."<< endl;  //connect to exception system
        return ERROR;
    } else {
        if (FirstFit(request, functionID) == 1) {
            cout << "Allocat successfully." << endl;
        } else {cout << "FAIL." << endl;}  // connect to exception system
        return OK;
    }
}


/*
 * Notice in this part, I modify it such that it doesn't ask the user to input something;
 * here I just set 3 functions f1,f2,f3 with function ID to be 1,2,3 and the corresponding
 * size 50,100,40, to test my code.
 * When combine it with our OS, we will set our functions with function ID and also size.
 */
int main(){
    initblock();
    show();
    int function1 = 50; //functionID = 1
    int function2 = 100;  //functionID = 2
    int function4 = 40;  // functionID = 4
    cout << "start running function 1" << endl;
    Alloc(function1,1);
    show();
    cout << "start running function 2" << endl;
    Alloc(function2,2);
    show();
    cout << "end runing funtion 1, thus free area 1" << endl;
    free(1);
    show();
    cout << "start running function 4" << endl;
    Alloc(function4,4);
    show();
    return 0;
}
